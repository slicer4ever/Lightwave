#module Pixel DirectX11_1
static const int MaxShadows = 8;
struct Light{
	float4 m_Position;
	float4 m_Direction;
	float4 m_Color;
	uint4 m_ShadowIndex;
};

struct LightResults{
	float Att;
	float SNdotL;
	float NdotL;
	float NdotV;
	float NdotH;
	float LdotH;
	float VdotH;
};

Texture2DArray DepthTex;
SamplerComparisonState DepthTexSampler;

StructuredBuffer<Light> Lights;

float PCFFilter(float2 TexCoord, int Layer, float Depth, float SNdotL){
	float Att = 0.0f;
	float Bias = clamp(0.005f*tan(acos(SNdotL)), 0.0f, 0.01f);
	Depth = Depth-Bias;
	for(int y=-1;y<=1;y++){
		for(int x=-1;x<=1;x++){
			Att += DepthTex.SampleCmp(DepthTexSampler, float3(TexCoord, float(Layer)), Depth, int2(x, y));
		}
	}
	return Att/9.0f;
}

LightResults MakeLightData(float3 Position, float3 SurfaceNormal, float3 Normal, float3 ViewPos, float3 LightDir){
	LightResults R;
	float3 nView = normalize(ViewPos-Position);
	float3 nHalf = normalize(nView+LightDir);
	R.SNdotL = saturate(dot(SurfaceNormal, LightDir));
	R.NdotL = saturate(dot(Normal, LightDir));
	R.NdotV = saturate(dot(Normal, nView));
	R.NdotH = saturate(dot(Normal, nHalf));
	R.LdotH = saturate(dot(LightDir, nHalf));
	R.VdotH = saturate(dot(nView, nHalf));
	R.Att = 1.0f;
	return R;
};

float4 ProjectPoint(float4 In){
	const float E = 0.001f;
	const float iT = 1.0f/3.0f;
	float3 Dir = In.xyz;
	float Len = length(Dir);
	float3 Nrm = normalize(Dir);
	float3 aNrm = abs(Nrm);
	float x = step(aNrm.y, aNrm.x)*step(aNrm.z, aNrm.x);
	float y = step(aNrm.x, aNrm.y)*step(aNrm.z, aNrm.y);
	float z = step(aNrm.x, aNrm.z)*step(aNrm.y, aNrm.z);
	float xP = step(Nrm.x, 0.0f);
	float yP = step(Nrm.y, 0.0f);
	float zP = step(Nrm.z, 0.0f);
	float2 Pnt = (float2(Nrm.x, Nrm.y)*float2(iT, 0.5f) + float2(-1.0f+iT, -0.5f+zP))*z;
	Pnt = Pnt + (float2(Nrm.x, Nrm.z)*float2(iT, 0.5f) + float2(-1.0f+(iT*3.0f), -0.5f+yP))*y;
	Pnt = Pnt + (float2(Nrm.z, Nrm.y)*float2(iT, 0.5f) + float2(-1.0f+(iT*5.0f), -0.5f+xP))*x;
	
	return float4(Pnt.x, Pnt.y, Len, 1.0f);
}

float doPointShadow(float4 sPosition, int Layer, float SNdotL){
	sPosition /= sPosition.w;
	float4 Proj = ProjectPoint(sPosition);
	float2 sTexCoord = Proj.xy*0.5f+0.5f;
	return PCFFilter(float2(sTexCoord.x, 1.0f-sTexCoord.y), Layer, Proj.z, SNdotL);
}

float doDirectionShadow(float4 sPosition, int Layer, float SNdotL){
	sPosition /= sPosition.w;
	float2 sTexCoord = float2(sPosition.x, -sPosition.y)*0.5f+0.5f;
	if(saturate(sTexCoord.x)!=sTexCoord.x || saturate(sTexCoord.y)!=sTexCoord.y) return 1.0f;
	return PCFFilter(sTexCoord, Layer, sPosition.z, SNdotL);
}

float doSpotShadow(float4 sPosition, int Layer, float SNdotL){
	sPosition /= sPosition.w;
	float2 sTexCoord = float2(sPosition.x, -sPosition.y)*0.5f+0.5f;
	return PCFFilter(sTexCoord, Layer, sPosition.z, SNdotL);
}

LightResults doAmbientLight(Light L, float AmbientOcclusion){
	LightResults R;
	R.Att = (-L.m_Position.w-1.0f)*AmbientOcclusion;
	R.SNdotL = 1.0f;
	R.NdotL = 1.0f;
	R.NdotV = 0.0f;
	R.NdotH = 0.5f;
	R.LdotH = 0.5f;
	R.VdotH = 0.5f;
	return R;
}

LightResults doDirectionalLight(Light L, float3 Position, float3 SurfaceNormal, float3 Normal, float3 ViewPos, float4 ShadowPositions[MaxShadows]){
	LightResults R = MakeLightData(Position, SurfaceNormal, Normal, ViewPos, -L.m_Direction.xyz);
	if(L.m_ShadowIndex.x!=-1) R.Att = doDirectionShadow(ShadowPositions[L.m_ShadowIndex.x], L.m_ShadowIndex.x, R.SNdotL);
	if(L.m_ShadowIndex.y!=-1 && R.Att==1.0f) R.Att = doDirectionShadow(ShadowPositions[L.m_ShadowIndex.y], L.m_ShadowIndex.y, R.SNdotL);
	if(L.m_ShadowIndex.z!=-1 && R.Att==1.0f) R.Att = doDirectionShadow(ShadowPositions[L.m_ShadowIndex.z], L.m_ShadowIndex.z, R.SNdotL);
	if(L.m_ShadowIndex.w!=-1 && R.Att==1.0f) R.Att = doDirectionShadow(ShadowPositions[L.m_ShadowIndex.w], L.m_ShadowIndex.w, R.SNdotL);
	return R;
}

LightResults doPointLight(Light L, float3 Position, float3 SurfaceNormal, float3 Normal, float3 ViewPos, float4 ShadowPositions[MaxShadows]){
	float3 Dir = Position-L.m_Position.xyz;
	float3 nDir = normalize(Dir);
	float Len = length(Dir);
	LightResults R = MakeLightData(Position, SurfaceNormal, Normal, ViewPos, -nDir);
	if(L.m_ShadowIndex.x!=-1) R.Att = doPointShadow(ShadowPositions[L.m_ShadowIndex.x], L.m_ShadowIndex.x, R.SNdotL);
	R.Att = R.Att * (1.0f-saturate((Len-L.m_Direction.y)/L.m_Direction.x));
	return R;
}

LightResults doSpotLight(Light L, float3 Position, float3 SurfaceNormal, float3 Normal, float3 ViewPos, float4 ShadowPositions[MaxShadows]){
	float3 Dir = Position-L.m_Position.xyz;
	float3 nDir = normalize(Dir);
	float Len = L.m_Direction.w;
	float mincos = cos(L.m_Position.w-1.0f);
	float maxcos = lerp(mincos, 1.0f, 0.5f);
	float c = dot(L.m_Direction.xyz, nDir);
	float Dis = dot(L.m_Direction.xyz, Dir);
	LightResults R = MakeLightData(Position, SurfaceNormal, Normal, ViewPos, -nDir);	
	if(L.m_ShadowIndex.x!=-1) R.Att = doSpotShadow(ShadowPositions[L.m_ShadowIndex.x], L.m_ShadowIndex.x, R.SNdotL);
	
	R.Att = R.Att * (1.0f-smoothstep(Len*0.75f, Len, Dis))*smoothstep(mincos, maxcos, c);
	return R;
}

LightResults doLighting(Light L, float AmbientOcclusion, float3 Position, float3 SurfaceNormal, float3 Normal, float3 ViewPos, float4 ShadowPositions[MaxShadows]){
	if(L.m_Position.w<0.0) return doAmbientLight(L, AmbientOcclusion);
	else if(L.m_Position.w==0.0f) return doDirectionalLight(L, Position, SurfaceNormal, Normal, ViewPos, ShadowPositions);
	else if(L.m_Position.w==1.0f) return doPointLight(L, Position, SurfaceNormal, Normal, ViewPos, ShadowPositions);
	return doSpotLight(L, Position, SurfaceNormal, Normal, ViewPos, ShadowPositions);
};

#module Pixel OpenGL4_5
const uint MaxShadows = 8;
struct Light{
	vec4 m_Position;
	vec4 m_Direction;
	vec4 m_Color;
	ivec4 m_ShadowIndex;
};

struct LightResults{
	float Att;
	float SNdotL;
	float NdotL;
	float NdotV;
	float NdotH;
	float LdotH;
	float VdotH;
};

uniform sampler2DArray DepthTex;

layout(std430, binding=0) buffer Lights{
	Light LightsD[];
};

float PCFFilter(vec2 TexCoord, int Layer, float Depth, float SNdotL){
	float Att = 0.0f;
	float Bias = clamp(0.005f*tan(acos(SNdotL)), 0.0f, 0.01f);
	//Fix Z to 0-1 range:
	Depth = (Depth*0.5f+0.5f)-Bias;
	for(int y=-1;y<=1;y++){
		for(int x=-1;x<=1;x++){
			//Using sampler2DArrayShadow is bugged on some intel platforms with textureOffset(sampler2DArrayShadow not being implemented) and can't be used reliably.
			//Att += textureOffset(DepthTex, vec4(TexCoord, float(Layer), Depth), ivec2(x, y)).r;
			Att += step(Depth, textureOffset(DepthTex, vec3(TexCoord, float(Layer)), ivec2(x, y)).r);
		}
	}
	return Att/9.0f;
}

vec4 ProjectPoint(vec4 In){
	const float E = 0.001f;
	const float iT = 1.0f/3.0f;
	vec3 Dir = In.xyz;
	float Len = length(Dir);
	vec3 Nrm = normalize(Dir);
	vec3 aNrm = abs(Nrm);
	float x = step(aNrm.y, aNrm.x)*step(aNrm.z, aNrm.x);
	float y = step(aNrm.x, aNrm.y)*step(aNrm.z, aNrm.y);
	float z = step(aNrm.x, aNrm.z)*step(aNrm.y, aNrm.z);
	float xP = step(Nrm.x, 0.0f);
	float yP = step(Nrm.y, 0.0f);
	float zP = step(Nrm.z, 0.0f);
	vec2 Pnt = (vec2(Nrm.x, Nrm.y)*vec2(iT, 0.5f) + vec2(-1.0f+iT, -0.5f+zP))*z;
	Pnt = Pnt + (vec2(Nrm.x, Nrm.z)*vec2(iT, 0.5f) + vec2(-1.0f+(iT*3.0f), -0.5f+yP))*y;
	Pnt = Pnt + (vec2(Nrm.z, Nrm.y)*vec2(iT, 0.5f) + vec2(-1.0f+(iT*5.0f), -0.5f+xP))*x;
	
	return vec4(Pnt.x, Pnt.y, Len, 1.0f);
}

float doPointShadow(vec4 sPosition, int Layer, float SNdotL){
	sPosition /= sPosition.w;
	vec4 Proj = ProjectPoint(sPosition);
	vec2 sTexCoord = Proj.xy*vec2(0.5f, -0.5f)+0.5f;
	return PCFFilter(vec2(sTexCoord.x, 1.0f-sTexCoord.y), Layer, Proj.z, SNdotL);
}
	
float doDirectionShadow(vec4 sPosition, int Layer, float SNdotL){
	sPosition /= sPosition.w;
	vec2 sTexCoord = sPosition.xy*0.5f+0.5f;
	if(clamp(sTexCoord.x, 0.0f, 1.0f)!=sTexCoord.x || clamp(sTexCoord.y, 0.0f, 1.0f)!=sTexCoord.y) return 1.0f;
	return PCFFilter(sTexCoord, Layer, sPosition.z, SNdotL);
}

float doSpotShadow(vec4 sPosition, int Layer, float SNdotL){
	sPosition /= sPosition.w;
	vec2 sTexCoord = sPosition.xy*0.5f+0.5f;
	return PCFFilter(sTexCoord, Layer, sPosition.z, SNdotL);
}

LightResults MakeLightData(vec3 Position, vec3 SurfaceNormal, vec3 Normal, vec3 ViewPos, vec3 LightDir){
	LightResults R;
	vec3 nView = normalize(ViewPos-Position);
	vec3 nHalf = normalize(nView+LightDir);
	R.SNdotL = clamp(dot(SurfaceNormal, LightDir), 0.0f, 1.0f);
	R.NdotL = clamp(dot(Normal, LightDir), 0.0f, 1.0f);
	R.NdotV = clamp(dot(Normal, nView), 0.0f, 1.0f);
	R.NdotH = clamp(dot(Normal, nHalf), 0.0f, 1.0f);
	R.LdotH = clamp(dot(LightDir, nHalf), 0.0f, 1.0f);
	R.VdotH = clamp(dot(nView, nHalf), 0.0f, 1.0f);
	R.Att = 1.0f;
	return R;
};

LightResults doAmbientLight(Light L, float AmbientOcclusion){
	LightResults R;
	R.Att = (-L.m_Position.w-1.0f)*AmbientOcclusion;
	R.SNdotL = 1.0f;
	R.NdotL = 1.0f;
	R.NdotV = 0.0f;
	R.NdotH = 0.5f;
	R.LdotH = 0.5f;
	R.VdotH = 0.5f;
	return R;
}

LightResults doDirectionalLight(Light L, vec3 Position, vec3 SurfaceNormal, vec3 Normal, vec3 ViewPos, vec4 ShadowPositions[MaxShadows]){
	LightResults R = MakeLightData(Position, SurfaceNormal, Normal, ViewPos, -L.m_Direction.xyz);
	if(L.m_ShadowIndex.x!=-1) R.Att = doDirectionShadow(ShadowPositions[L.m_ShadowIndex.x], L.m_ShadowIndex.x, R.SNdotL);
	if(L.m_ShadowIndex.y!=-1 && R.Att==1.0f) R.Att = doDirectionShadow(ShadowPositions[L.m_ShadowIndex.y], L.m_ShadowIndex.y, R.SNdotL);
	if(L.m_ShadowIndex.z!=-1 && R.Att==1.0f) R.Att = doDirectionShadow(ShadowPositions[L.m_ShadowIndex.z], L.m_ShadowIndex.z, R.SNdotL);
	if(L.m_ShadowIndex.w!=-1 && R.Att==1.0f) R.Att = doDirectionShadow(ShadowPositions[L.m_ShadowIndex.w], L.m_ShadowIndex.w, R.SNdotL);
	return R;
}

LightResults doPointLight(Light L, vec3 Position, vec3 SurfaceNormal, vec3 Normal, vec3 ViewPos, vec4 ShadowPositions[MaxShadows]){
	vec3 Dir = Position-L.m_Position.xyz;
	vec3 nDir = normalize(Dir);
	float Len = length(Dir);
	LightResults R = MakeLightData(Position, SurfaceNormal, Normal, ViewPos, -nDir);
	if(L.m_ShadowIndex.x!=-1) R.Att = doPointShadow(ShadowPositions[L.m_ShadowIndex.x], L.m_ShadowIndex.x, R.SNdotL);
	R.Att = R.Att * (1.0f-clamp((Len-L.m_Direction.y)/L.m_Direction.x, 0.0f, 1.0f));
	return R;
}

LightResults doSpotLight(Light L, vec3 Position, vec3 SurfaceNormal, vec3 Normal, vec3 ViewPos, vec4 ShadowPositions[MaxShadows]){
	vec3 Dir = Position-L.m_Position.xyz;
	vec3 nDir = normalize(Dir);
	float Len = L.m_Direction.w;
	float mincos = cos(L.m_Position.w-1.0f);
	float maxcos = mix(mincos, 1.0f, 0.5f);
	float c = dot(L.m_Direction.xyz, nDir);
	float Dis = dot(L.m_Direction.xyz, Dir);
	LightResults R = MakeLightData(Position, SurfaceNormal, Normal, ViewPos, -nDir);
	
	if(L.m_ShadowIndex.x!=-1) R.Att = doSpotShadow(ShadowPositions[L.m_ShadowIndex.x], L.m_ShadowIndex.x, R.SNdotL);
	
	R.Att = R.Att * (1.0f-smoothstep(Len*0.75f, Len, Dis)) * smoothstep(mincos, maxcos, c);
	return R;
}

LightResults doLighting(Light L, float AmbientOcclusion, vec3 Position, vec3 SurfaceNormal, vec3 Normal, vec3 ViewPos, vec4 ShadowPositions[MaxShadows]){
	if(L.m_Position.w<0.0f) return doAmbientLight(L, AmbientOcclusion);
	else if(L.m_Position.w==0.0f) return doDirectionalLight(L, Position, SurfaceNormal, Normal, ViewPos, ShadowPositions);
	else if(L.m_Position.w==1.0f) return doPointLight(L, Position, SurfaceNormal, Normal, ViewPos, ShadowPositions);
	return doSpotLight(L, Position, SurfaceNormal, Normal, ViewPos, ShadowPositions);
};
