#module Pixel OpenGL4_5
#version 440
#include "LightingFunctions.plws"
#include "Tonemapping.plws"
#ifdef METALLICROUGHNESS
#include "PBRMetallicShader.plws"
#elif SPECULARGLOSSINESS
#include "SpecularGlossiness.plws"
#endif

#module Pixel DirectX11_1
static const uint NormalTexBit = 0x1;
static const uint OcclussionTexBit = 0x2;
static const uint EmissiveTexBit = 0x4;
static const uint ULColorTexBit = 0x8;

cbuffer ListData{
	float4x4 ProjViewMatrix;
	float4x4 ShadowProjViewMatrix[MaxShadows];
	float4 FrustumPoints[6]; //Near TL, TR, BL.  Far TL, TR, BL.
	float4 ViewPosition;
	float2 ScreenSize;
	int2 ThreadDimensions;
	int2 TileSize;
	int LightCount;
};

cbuffer MaterialData{
	float4 MaterialColorA;
	float4 MaterialColorB;
	float4 EmissiveFactor;
	uint HasTexturesFlag;
};

struct Pixel{
  float4 Position : SV_POSITION;
  float4 WPosition : POSITION0;
  float4 SPosition[MaxShadows] : POSITION1;
  float4 TexCoord : TEXCOORD0;
  float3x3 TBN : NORMAL0;
};

StructuredBuffer<uint> LightArray;

#ifdef UNLIT
Texture2D ColorTex;
#endif

Texture2D NormalTex;
Texture2D OcclussionTex;
Texture2D EmissiveTex;

SamplerState NormalSmp;
SamplerState OcclussionSmp;
SamplerState EmissiveSmp;
#ifdef UNLIT
SamplerState ColorSmp;
#endif

float4 main(Pixel In) : SV_TARGET{
	const uint LightsPerTile = 64;

	float2 SP = In.Position.xy;
	uint2 Pos = uint2(uint(SP.x), uint(SP.y))/TileSize;
	uint offset = (Pos.x+Pos.y*(ThreadDimensions.x*32))*LightsPerTile;
	float4 oColor = float4(0.0f, 0.0f, 0.0f, 1.0f);
	
	float4 Emissive = EmissiveFactor;
	float AOcclusion = 1.0f;

	float3 SurfaceNormal = normalize(In.TBN[2]);
	float3 Normal = SurfaceNormal;
	if((HasTexturesFlag&OcclussionTexBit )!=0) AOcclusion = OcclussionTex.Sample(OcclussionSmp, In.TexCoord.xy).r;
	if((HasTexturesFlag&EmissiveTexBit)!=0) Emissive *= SRGBToLinear(EmissiveTex.Sample(EmissiveSmp, In.TexCoord.xy));
	if((HasTexturesFlag&NormalTexBit)!=0){
		float3 N = normalize(NormalTex.Sample(NormalSmp, In.TexCoord.xy).xyz*2.0f-1.0f);
		Normal = normalize(mul(N, In.TBN));
	}
#ifdef METALLICROUGHNESS
	PBRMaterial PBRMat = PrepareMaterial(In.TexCoord.xy, HasTexturesFlag, MaterialColorA, MaterialColorB);
	float Transparency = PBRMat.m_BaseColor.a+Emissive.a;
#elif SPECULARGLOSSINESS
	SpecularGlossMat GlossMat = PrepareMaterial(In.TexCoord.xy, HasTexturesFlag, MaterialColorA, MaterialColorB);
	float Transparency = GlossMat.m_DiffuseColor.a+Emissive.a;
#elif UNLIT
	oColor = MaterialColorA;
	if((HasTexturesFlag&ULColorTexBit)!=0) oColor *= ColorTex.Sample(ColorSmp, In.TexCoord.xy);
	float Transparency = oColor.a+Emissive.a;
	if(Transparency<0.01f) discard;
	return Emissive+oColor;
#endif
	if(Transparency<0.01f) discard;
	
	oColor = float4(0.0f, 0.0f, 0.0f, 1.0f);
	[loop][fastopt]
	for(uint i=offset;i<offset+LightsPerTile;i++){
		if(LightArray[i]==-1) break;
		Light L = Lights[LightArray[i]];
		LightResults R = doLighting(L, AOcclusion, In.WPosition.xyz, SurfaceNormal, Normal, ViewPosition.xyz, In.SPosition);
#ifdef METALLICROUGHNESS
		oColor += doMetallicRoughness(L, R, PBRMat);
#elif SPECULARGLOSSINESS
		oColor += doSpecularGlossiness(L, R, GlossMat);
#endif
	}
	oColor = ToneMap(Emissive+oColor);
	oColor.a = Transparency;
	return oColor;
}
#module Pixel OpenGL4_5
const uint NormalTexBit = 0x1;
const uint OcclussionTexBit = 0x2;
const uint EmissiveTexBit = 0x4;
const uint ULColorTexBit = 0x8;

layout(std140) uniform ListData{
	mat4 ProjViewMatrix;
	mat4 ShadowProjViewMatrix[MaxShadows];
	vec4 FrustumPoints[6]; //Near TL, TR, BL.  Far TL, TR, BL.
	vec4 ViewPosition;
	vec2 ScreenSize;
	ivec2 ThreadDimensions;
	ivec2 TileSize;
	int LightCount;
};

layout(std140) uniform MaterialData{
	vec4 MaterialColorA;
	vec4 MaterialColorB;
	vec4 EmissiveFactor;
	uint HasTexturesFlag;
};

in PixelData{
  vec4 WPosition;
  vec4 SPosition[MaxShadows];
  vec4 TexCoord;
  mat3 TBN;
}p;

out vec4 oColor;

layout(std430, binding=1) buffer LightArray{
	uint LightArrayD[];
};

#ifdef UNLIT
uniform sampler2D ColorTex;
#endif
uniform sampler2D NormalTex;
uniform sampler2D OcclussionTex;
uniform sampler2D EmissiveTex;

void main(void){
	const uint LightsPerTile = 64;

	vec2 SP = gl_FragCoord.xy;
	uvec2 Pos = uvec2(uint(SP.x), ScreenSize.y-uint(SP.y))/TileSize;
	uint offset = (Pos.x+Pos.y*(ThreadDimensions.x*32))*LightsPerTile;
	
	vec4 Emissive = EmissiveFactor;
	float Occlussion = 1.0f;
	vec3 SurfaceNormal = normalize(p.TBN[2]);
	vec3 Normal = SurfaceNormal;
	if((HasTexturesFlag&OcclussionTexBit)!=0) Occlussion = texture(OcclussionTex, p.TexCoord.xy).r;
	if((HasTexturesFlag&EmissiveTexBit)!=0) Emissive *= SRGBToLinear(texture(EmissiveTex, p.TexCoord.xy));
	if((HasTexturesFlag&NormalTexBit)!=0){
		vec3 N = normalize(texture(NormalTex, p.TexCoord.xy).xyz*2.0f-1.0f);
		Normal = normalize(p.TBN*N);
	}
#ifdef METALLICROUGHNESS
	PBRMaterial PBRMat = PrepareMaterial(p.TexCoord.xy, HasTexturesFlag, MaterialColorA, MaterialColorB);
	float Transparency = PBRMat.m_BaseColor.a+Emissive.a;
#elif SPECULARGLOSSINESS
	SpecularGlossMat GlossMat = PrepareMaterial(p.TexCoord.xy, HasTexturesFlag, MaterialColorA, MaterialColorB);
	float Transparency = GlossMat.m_DiffuseColor.a+Emissive.a;
#elif UNLIT
	oColor = MaterialColorA;
	if((HasTexturesFlag&ULColorTexBit)!=0) oColor *= texture(ColorTex, p.TexCoord.xy);
	float Transparency = oColor.a+Emissive.a;
	if(Transparency<0.01f) discard;
	oColor = Emissive+oColor;
	return;
	
#endif

	if(Transparency<0.01f) discard;
	
	oColor = vec4(0.0f, 0.0f, 0.0f, 1.0f);
	for(uint i=offset;i<offset+LightsPerTile;i++){
		if(LightArrayD[i]==-1) break;
		Light L = LightsD[LightArrayD[i]];
		LightResults R = doLighting(L, Occlussion, p.WPosition.xyz, SurfaceNormal, Normal, ViewPosition.xyz, p.SPosition);
#ifdef METALLICROUGHNESS
		oColor += doMetallicRoughness(L, R, PBRMat);
#elif SPECULARGLOSSINESS
		oColor += doSpecularGlossiness(L, R, GlossMat);
#endif
	}
	oColor = ToneMap(Emissive+oColor);
	oColor.a = Transparency;
	return;
}